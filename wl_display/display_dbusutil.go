// Code generated by "dbusutil-gen -output display_dbusutil.go -import pkg.deepin.io/lib/dbus1,github.com/linuxdeepin/go-x11-client -type Manager,Monitor manager.go monitor.go"; DO NOT EDIT.

package display

import (
	x "github.com/linuxdeepin/go-x11-client"
	dbus "pkg.deepin.io/lib/dbus1"
)

func (v *Manager) setPropMonitors(value []dbus.ObjectPath) {
	v.Monitors = value
	v.emitPropChangedMonitors(value)
}

func (v *Manager) setMonitors(value []dbus.ObjectPath) {
	v.Monitors = value
}

func (v *Manager) emitPropChangedMonitors(value []dbus.ObjectPath) error {
	return v.service.EmitPropertyChanged(v, "Monitors", value)
}

func (v *Manager) setPropCustomIdList(value []string) {
	v.CustomIdList = value
	v.emitPropChangedCustomIdList(value)
}

func (v *Manager) setCustomIdList(value []string) {
	v.CustomIdList = value
}

func (v *Manager) emitPropChangedCustomIdList(value []string) error {
	return v.service.EmitPropertyChanged(v, "CustomIdList", value)
}

func (v *Manager) setPropHasChanged(value bool) (changed bool) {
	if v.HasChanged != value {
		logger.Info("setPropHasChanged")
		v.HasChanged = value
		v.emitPropChangedHasChanged(value)
		return true
	}
	return false
}
func (v *Manager) setHasChanged(value bool) (changed bool) {
	if v.HasChanged != value {
		logger.Info("setHasChanged no prop")
		v.HasChanged = value
		return true
	}
	return false
}

func (v *Manager) emitPropChangedHasChanged(value bool) error {
	return v.service.EmitPropertyChanged(v, "HasChanged", value)
}

func (v *Manager) setPropDisplayMode(value byte) (changed bool) {
	//if v.DisplayMode != value {
	logger.Info("setPropDisplayMode")
	v.DisplayMode = value
	v.emitPropChangedDisplayMode(value)
	return true
	//}
	//return false
}

func (v *Manager) setDisplayModeNoProp(value byte) (changed bool) {
	if v.DisplayMode != value {
		logger.Info("setDisplayMode no prop")
		v.DisplayMode = value
		return true
	}
	return false
}

func (v *Manager) emitPropChangedDisplayMode(value byte) error {
	return v.service.EmitPropertyChanged(v, "DisplayMode", value)
}

func (v *Manager) setPropBrightness(value map[string]float64) {
	logger.Info("setPropBrightness")
	v.Brightness = value
	v.emitPropChangedBrightness(value)
}

func (v *Manager) setBrightness(value map[string]float64) {
	logger.Info("setBrightness no prop")
	v.Brightness = value
}

func (v *Manager) emitPropChangedBrightness(value map[string]float64) error {
	return v.service.EmitPropertyChanged(v, "Brightness", value)
}

func (v *Manager) setPropTouchMap(value map[string]string) {
	v.TouchMap = value
	v.emitPropChangedTouchMap(value)
}

func (v *Manager) setTouchMap(value map[string]string) {
	v.TouchMap = value
	v.emitPropChangedTouchMap(value)
}

func (v *Manager) emitPropChangedTouchMap(value map[string]string) error {
	return v.service.EmitPropertyChanged(v, "TouchMap", value)
}

func (v *Manager) setPropCurrentCustomId(value string) (changed bool) {
	if v.CurrentCustomId != value {
		v.CurrentCustomId = value
		v.emitPropChangedCurrentCustomId(value)
		return true
	}
	return false
}

/*
func (v *Manager) setCurrentCustomId(value string) (changed bool) {
	if v.CurrentCustomId != value {
		v.CurrentCustomId = value
		return true
	}
	return false
}*/

func (v *Manager) emitPropChangedCurrentCustomId(value string) error {
	return v.service.EmitPropertyChanged(v, "CurrentCustomId", value)
}

func (v *Manager) setPropPrimary(value string) (changed bool) {
	//if v.Primary != value {
	logger.Info("setPropPrimary")
	v.Primary = value
	v.emitPropChangedPrimary(value)
	return true
	//}
	//return false
}

func (v *Manager) setPrimaryNoProp(value string) (changed bool) {
	if v.Primary != value {
		logger.Info("setPrimary no prop")
		v.Primary = value
		return true
	}
	return false
}

func (v *Manager) emitPropChangedPrimary(value string) error {
	return v.service.EmitPropertyChanged(v, "Primary", value)
}

func (v *Manager) setPropPrimaryRect(value x.Rectangle) {
	logger.Info("setPropPrimaryRect")
	v.PrimaryRect = value
	v.emitPropChangedPrimaryRect(value)
}

func (v *Manager) setPrimaryRectNoProp(value x.Rectangle) {
	logger.Info("setPrimaryRect no prop")
	v.PrimaryRect = value
}

func (v *Manager) emitPropChangedPrimaryRect(value x.Rectangle) error {
	return v.service.EmitPropertyChanged(v, "PrimaryRect", value)
}

func (v *Manager) setPropScreenWidth(value uint16) (changed bool) {
	//if v.ScreenWidth != value {
	logger.Info("setPropScreenWidth")
	v.ScreenWidth = value
	v.emitPropChangedScreenWidth(value)
	return true
	//}
	//return false
}

func (v *Manager) setScreenWidth(value uint16) (changed bool) {
	if v.ScreenWidth != value {
		logger.Info("setScreenWidth no prop")
		v.ScreenWidth = value
		return true
	}
	return false
}

func (v *Manager) emitPropChangedScreenWidth(value uint16) error {
	return v.service.EmitPropertyChanged(v, "ScreenWidth", value)
}

func (v *Manager) setPropScreenHeight(value uint16) (changed bool) {
	//if v.ScreenHeight != value {
	logger.Info("setPropScreenHeight")
	v.ScreenHeight = value
	v.emitPropChangedScreenHeight(value)
	return true
	//}
	//return false
}

func (v *Manager) setScreenHeight(value uint16) (changed bool) {
	if v.ScreenHeight != value {
		logger.Info("setScreenHeight no prop")
		v.ScreenHeight = value
		return true
	}
	return false
}

func (v *Manager) emitPropChangedScreenHeight(value uint16) error {
	return v.service.EmitPropertyChanged(v, "ScreenHeight", value)
}

func (v *Monitor) setPropID(value uint32) (changed bool) {
	if v.ID != value {
		v.ID = value
		v.emitPropChangedID(value)
		return true
	}
	return false
}

func (v *Monitor) setID(value uint32) (changed bool) {
	if v.ID != value {
		v.ID = value
		logger.Info("setID no Prop")
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedID(value uint32) error {
	return v.service.EmitPropertyChanged(v, "ID", value)
}

func (v *Monitor) setPropName(value string) (changed bool) {
	if v.Name != value {
		logger.Info("setPropName")
		v.Name = value
		v.emitPropChangedName(value)
		return true
	}
	return false
}

func (v *Monitor) setName(value string) (changed bool) {
	if v.Name != value {
		logger.Info("setName no prop")
		v.Name = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedName(value string) error {
	return v.service.EmitPropertyChanged(v, "Name", value)
}

func (v *Monitor) setPropConnected(value bool) (changed bool) {
	if v.Connected != value {
		v.Connected = value
		v.emitPropChangedConnected(value)
		return true
	}
	return false
}

func (v *Monitor) setConnected(value bool) (changed bool) {
	if v.Connected != value {
		v.Connected = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedConnected(value bool) error {
	return v.service.EmitPropertyChanged(v, "Connected", value)
}

func (v *Monitor) setPropRotations(value []uint16) {
	v.Rotations = value
	v.emitPropChangedRotations(value)
	logger.Info("setPropRotations")
}

func (v *Monitor) setRotations(value []uint16) {
	v.Rotations = value
	logger.Info("setRotations no prop")
}

func (v *Monitor) emitPropChangedRotations(value []uint16) error {
	return v.service.EmitPropertyChanged(v, "Rotations", value)
}

func (v *Monitor) setPropReflects(value []uint16) {
	logger.Info("setPropReflects")
	v.Reflects = value
	v.emitPropChangedReflects(value)
}

/*
func (v *Monitor) setReflects(value []uint16) {
	logger.Info("setReflects no prop")
	v.Reflects = value
}
*/
func (v *Monitor) emitPropChangedReflects(value []uint16) error {
	return v.service.EmitPropertyChanged(v, "Reflects", value)
}

func (v *Monitor) setPropBestMode(value ModeInfo) {
	logger.Info("setPropBestMode")
	v.BestMode = value
	v.emitPropChangedBestMode(value)
}

func (v *Monitor) setBestMode(value ModeInfo) {
	logger.Info("setBestMode no prop")
	v.BestMode = value
}

func (v *Monitor) emitPropChangedBestMode(value ModeInfo) error {
	return v.service.EmitPropertyChanged(v, "BestMode", value)
}

func (v *Monitor) setPropModes(value []ModeInfo) {
	logger.Info("setPropModes")
	v.Modes = value
	v.emitPropChangedModes(value)
}

func (v *Monitor) setModes(value []ModeInfo) {
	logger.Info("setModes no prop")
	v.Modes = value
}

func (v *Monitor) emitPropChangedModes(value []ModeInfo) error {
	return v.service.EmitPropertyChanged(v, "Modes", value)
}

func (v *Monitor) setPropPreferredModes(value []ModeInfo) {
	logger.Info("setPropPreferredModes")
	v.PreferredModes = value
	v.emitPropChangedPreferredModes(value)
}

func (v *Monitor) setPreferredModes(value []ModeInfo) {
	logger.Info("setPropPreferredModes no prop")
	v.PreferredModes = value
}

func (v *Monitor) emitPropChangedPreferredModes(value []ModeInfo) error {
	return v.service.EmitPropertyChanged(v, "PreferredModes", value)
}

func (v *Monitor) setPropMmWidth(value uint32) (changed bool) {
	//if v.MmWidth != value {
	v.MmWidth = value
	logger.Info("setPropMmWidth")
	v.emitPropChangedMmWidth(value)
	return true
	//}
	//return false
}

func (v *Monitor) setMmWidth(value uint32) (changed bool) {
	if v.MmWidth != value {
		v.MmWidth = value
		logger.Info("setPropMmWidth no prop")
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedMmWidth(value uint32) error {
	return v.service.EmitPropertyChanged(v, "MmWidth", value)
}

func (v *Monitor) setPropMmHeight(value uint32) (changed bool) {
	//if v.MmHeight != value {
	v.MmHeight = value
	logger.Info("setPropMmHeight")
	v.emitPropChangedMmHeight(value)
	return true
	//}
	//return false
}

func (v *Monitor) setMmHeight(value uint32) (changed bool) {
	if v.MmHeight != value {
		v.MmHeight = value
		logger.Info("setPropMmHeight no prop")
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedMmHeight(value uint32) error {
	return v.service.EmitPropertyChanged(v, "MmHeight", value)
}

func (v *Monitor) setPropEnabled(value bool) (changed bool) {
	if v.Enabled != value {
		logger.Info("setPropEnabled")
		v.Enabled = value
		v.emitPropChangedEnabled(value)
		return true
	}
	return false
}

func (v *Monitor) setEnabled(value bool) (changed bool) {
	if v.Enabled != value {
		logger.Info("setEnabled no prop")
		v.Enabled = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedEnabled(value bool) error {
	return v.service.EmitPropertyChanged(v, "Enabled", value)
}

func (v *Monitor) setPropX(value int16) (changed bool) {
	//if v.X != value {
	logger.Info("setPropX")
	v.X = value
	v.emitPropChangedX(value)
	return true
	//}
	//return false
}

func (v *Monitor) setX(value int16) (changed bool) {
	if v.X != value {
		logger.Info("setX No Prop")
		v.X = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedX(value int16) error {
	return v.service.EmitPropertyChanged(v, "X", value)
}

func (v *Monitor) setY(value int16) (changed bool) {
	if v.Y != value {
		logger.Info("setY no Prop")
		v.Y = value
		return true
	}
	return false
}

func (v *Monitor) setPropY(value int16) (changed bool) {
	//if v.Y != value {
	logger.Info("setPropY")
	v.Y = value
	v.emitPropChangedY(value)
	return true
	//}
	//return false
}

func (v *Monitor) emitPropChangedY(value int16) error {
	return v.service.EmitPropertyChanged(v, "Y", value)
}

func (v *Monitor) setWidth(value uint16) (changed bool) {
	if v.Width != value {
		logger.Info("setWidth  no Prop")
		v.Width = value
		return true
	}
	return false
}

func (v *Monitor) setPropWidth(value uint16) (changed bool) {
	//if v.Width != value {
	logger.Info("setPropWidth")
	v.Width = value
	v.emitPropChangedWidth(value)
	return true
	//}
	//return false
}

func (v *Monitor) emitPropChangedWidth(value uint16) error {
	return v.service.EmitPropertyChanged(v, "Width", value)
}

func (v *Monitor) setHeight(value uint16) (changed bool) {
	if v.Height != value {
		logger.Info("setHeight no Prop")
		v.Height = value
		return true
	}
	return false
}

func (v *Monitor) setPropHeight(value uint16) (changed bool) {
	//if v.Height != value {
	logger.Info("setPropHeight")
	v.Height = value
	v.emitPropChangedHeight(value)
	return true
	//}
	//return false
}

func (v *Monitor) emitPropChangedHeight(value uint16) error {
	return v.service.EmitPropertyChanged(v, "Height", value)
}

func (v *Monitor) setPropRotation(value uint16) (changed bool) {
	//if v.Rotation != value {
	logger.Info("setPropRotation")
	v.Rotation = value
	v.emitPropChangedRotation(value)
	return true
	//}
	//return false
}

func (v *Monitor) setRotationOnly(value uint16) (changed bool) {
	if v.Rotation != value {
		logger.Info("setRotationOnly")
		v.Rotation = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedRotation(value uint16) error {
	return v.service.EmitPropertyChanged(v, "Rotation", value)
}

func (v *Monitor) setPropReflect(value uint16) (changed bool) {
	if v.Reflect != value {
		logger.Info("setPropReflect")
		v.Reflect = value
		v.emitPropChangedReflect(value)
		return true
	}
	return false
}

/*
func (v *Monitor) setReflect(value uint16) (changed bool) {
	if v.Reflect != value {
		logger.Info("setPropReflect no Prop")
		v.Reflect = value
		return true
	}
	return false
}
*/
func (v *Monitor) emitPropChangedReflect(value uint16) error {
	return v.service.EmitPropertyChanged(v, "Reflect", value)
}

func (v *Monitor) setPropRefreshRate(value float64) (changed bool) {
	if v.RefreshRate != value {
		v.RefreshRate = value
		v.emitPropChangedRefreshRate(value)
		return true
	}
	return false
}

func (v *Monitor) setRefreshRate(value float64) (changed bool) {
	if v.RefreshRate != value {
		v.RefreshRate = value
		return true
	}
	return false
}

func (v *Monitor) emitPropChangedRefreshRate(value float64) error {
	return v.service.EmitPropertyChanged(v, "RefreshRate", value)
}

func (v *Monitor) setPropCurrentMode(value ModeInfo) {
	logger.Info("setPropCurrentMode")
	v.CurrentMode = value
	v.emitPropChangedCurrentMode(value)
}

func (v *Monitor) setCurrentMode(value ModeInfo) {
	logger.Info("setCurrentMode No Prop")
	v.CurrentMode = value
}

func (v *Monitor) emitPropChangedCurrentMode(value ModeInfo) error {
	return v.service.EmitPropertyChanged(v, "CurrentMode", value)
}
